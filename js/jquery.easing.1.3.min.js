/*
 * jQuery Easing v1.3 - http://gsgd.co.uk/sandbox/jquery/easing/
 *
 * Uses the built in easing capabilities added In jQuery 1.1
 * to offer multiple easing options
 *
 * TERMS OF USE - jQuery Easing
 *
 * Open source under the BSD License.
 *
 * Copyright © 2008 George McGinley Smith
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
jQuery.easing.jswing = jQuery.easing.swing; jQuery.extend(jQuery.easing, {
    def: "easeOutQuad", swing(a, b, c, d, e) { return jQuery.easing[jQuery.easing.def](a, b, c, d, e); }, easeInQuad(a, b, c, d, e) { return d * (b /= e) * b + c; }, easeOutQuad(a, b, c, d, e) { return -d * (b /= e) * (b - 2) + c; }, easeInOutQuad(a, b, c, d, e) { if ((b /= e / 2) < 1) return d / 2 * b * b + c; return -d / 2 * (--b * (b - 2) - 1) + c; }, easeInCubic(a, b, c, d, e) { return d * (b /= e) * b * b + c; }, easeOutCubic(a, b, c, d, e) { return d * ((b = b / e - 1) * b * b + 1) + c; }, easeInOutCubic(a, b, c, d, e) { if ((b /= e / 2) < 1) return d / 2 * b * b * b + c; return d / 2 * ((b -= 2) * b * b + 2) + c; }, easeInQuart(a, b, c, d, e) { return d * (b /= e) * b * b * b + c; }, easeOutQuart(a, b, c, d, e) { return -d * ((b = b / e - 1) * b * b * b - 1) + c; }, easeInOutQuart(a, b, c, d, e) { if ((b /= e / 2) < 1) return d / 2 * b * b * b * b + c; return -d / 2 * ((b -= 2) * b * b * b - 2) + c; }, easeInQuint(a, b, c, d, e) { return d * (b /= e) * b * b * b * b + c; }, easeOutQuint(a, b, c, d, e) { return d * ((b = b / e - 1) * b * b * b * b + 1) + c; }, easeInOutQuint(a, b, c, d, e) { if ((b /= e / 2) < 1) return d / 2 * b * b * b * b * b + c; return d / 2 * ((b -= 2) * b * b * b * b + 2) + c; }, easeInSine(a, b, c, d, e) { return -d * Math.cos(b / e * (Math.PI / 2)) + d + c; }, easeOutSine(a, b, c, d, e) { return d * Math.sin(b / e * (Math.PI / 2)) + c; }, easeInOutSine(a, b, c, d, e) { return -d / 2 * (Math.cos(Math.PI * b / e) - 1) + c; }, easeInExpo(a, b, c, d, e) { return b == 0 ? c : d * 2 ** (10 * (b / e - 1)) + c; }, easeOutExpo(a, b, c, d, e) { return b == e ? c + d : d * (-(2 ** (-10 * b / e)) + 1) + c; }, easeInOutExpo(a, b, c, d, e) { if (b == 0) return c; if (b == e) return c + d; if ((b /= e / 2) < 1) return d / 2 * 2 ** (10 * (b - 1)) + c; return d / 2 * (-(2 ** (-10 * --b)) + 2) + c; }, easeInCirc(a, b, c, d, e) { return -d * (Math.sqrt(1 - (b /= e) * b) - 1) + c; }, easeOutCirc(a, b, c, d, e) { return d * Math.sqrt(1 - (b = b / e - 1) * b) + c; }, easeInOutCirc(a, b, c, d, e) { if ((b /= e / 2) < 1) return -d / 2 * (Math.sqrt(1 - b * b) - 1) + c; return d / 2 * (Math.sqrt(1 - (b -= 2) * b) + 1) + c; }, easeInElastic(a, b, c, d, e) { var f = 1.70158; let g = 0; let h = d; if (b == 0) return c; if ((b /= e) == 1) return c + d; if (!g)g = e * 0.3; if (h < Math.abs(d)) { h = d; var f = g / 4; } else var f = g / (2 * Math.PI) * Math.asin(d / h); return -(h * 2 ** (10 * (b -= 1)) * Math.sin((b * e - f) * 2 * Math.PI / g)) + c; }, easeOutElastic(a, b, c, d, e) { var f = 1.70158; let g = 0; let h = d; if (b == 0) return c; if ((b /= e) == 1) return c + d; if (!g)g = e * 0.3; if (h < Math.abs(d)) { h = d; var f = g / 4; } else var f = g / (2 * Math.PI) * Math.asin(d / h); return h * 2 ** (-10 * b) * Math.sin((b * e - f) * 2 * Math.PI / g) + d + c; }, easeInOutElastic(a, b, c, d, e) { var f = 1.70158; let g = 0; let h = d; if (b == 0) return c; if ((b /= e / 2) == 2) return c + d; if (!g)g = e * 0.3 * 1.5; if (h < Math.abs(d)) { h = d; var f = g / 4; } else var f = g / (2 * Math.PI) * Math.asin(d / h); if (b < 1) return -0.5 * h * 2 ** (10 * (b -= 1)) * Math.sin((b * e - f) * 2 * Math.PI / g) + c; return h * 2 ** (-10 * (b -= 1)) * Math.sin((b * e - f) * 2 * Math.PI / g) * 0.5 + d + c; }, easeInBack(a, b, c, d, e, f) { if (f == undefined)f = 1.70158; return d * (b /= e) * b * ((f + 1) * b - f) + c; }, easeOutBack(a, b, c, d, e, f) { if (f == undefined)f = 1.70158; return d * ((b = b / e - 1) * b * ((f + 1) * b + f) + 1) + c; }, easeInOutBack(a, b, c, d, e, f) { if (f == undefined)f = 1.70158; if ((b /= e / 2) < 1) return d / 2 * b * b * (((f *= 1.525) + 1) * b - f) + c; return d / 2 * ((b -= 2) * b * (((f *= 1.525) + 1) * b + f) + 2) + c; }, easeInBounce(a, b, c, d, e) { return d - jQuery.easing.easeOutBounce(a, e - b, 0, d, e) + c; }, easeOutBounce(a, b, c, d, e) { if ((b /= e) < 1 / 2.75) { return d * 7.5625 * b * b + c; } if (b < 2 / 2.75) { return d * (7.5625 * (b -= 1.5 / 2.75) * b + 0.75) + c; } if (b < 2.5 / 2.75) { return d * (7.5625 * (b -= 2.25 / 2.75) * b + 0.9375) + c; } return d * (7.5625 * (b -= 2.625 / 2.75) * b + 0.984375) + c; }, easeInOutBounce(a, b, c, d, e) { if (b < e / 2) return jQuery.easing.easeInBounce(a, b * 2, 0, d, e) * 0.5 + c; return jQuery.easing.easeOutBounce(a, b * 2 - e, 0, d, e) * 0.5 + d * 0.5 + c; },
});
/*
 *
 * TERMS OF USE - EASING EQUATIONS
 *
 * Open source under the BSD License.
 *
 * Copyright © 2001 Robert Penner
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list
 * of conditions and the following disclaimer in the documentation and/or other materials
 * provided with the distribution.
 *
 * Neither the name of the author nor the names of contributors may be used to endorse
 * or promote products derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
 *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */